This file contains questions that will be processed later.
==========================================================

AAA. GENERAL
----------------------------------------------------------

- I am here : 2.3 Error Messages ->  -- Function: const char * strerrorname_np (int ERRNUM)

- The question are not sorted by priority / importance and should be before processing. Same for the categories.
- However, the categories are sorted by alphabetical order and, if possible, some questions (or points within questions) too.

==========================================================

C LANGUAGE
----------------------------------------------------------

- Where are the keywords defined ?
- Where are defined the basic types 'int' and 'char' ?
- Where are defined the types 'valist' (see variadic functions) ?
- Where to find the code behind 'stdarg.h' (not in libc) ?
- Where are defined - and what is the code behing (are they libc functions ?) - basic functions as ?
  	- 'exec'
	- 'fclose'
	- 'fopen'
	- 'getc'
	- 'printf' (stdio.h)
	- 'putc'
	- 'scanf'

==========================================================

CODE
----------------------------------------------------------

- How to create a dynamic variable name, for example : I want to loop on an array of variable names and get their value -> how to do it ?
      Array = [ "char", "int"]
      I want to get the sizeof(char) and sizeof(int).
      See the file "types_and_number_of_bits.c" to loop on array of all types to get their size.
- How to adapt dynamically the format of printf output ? For example, I want to align some string outputted but I want that they align all length depending on the largest one - and I do not already know how many char it will contains ?
- How to evaluate an expression placed within a string ? Example : I want to evaluate a string that does "int result = 2 * 2 * ... * 2" and multiply 2 a N number of times so I need to loop N times to create the string that will then be evaluated. 

==========================================================

COMPILATION
----------------------------------------------------------

Pre-processing :

- How to interpret the content added within the lines '#' after pre-processing the .c file ?
- Specifically, how to interpret the 'built-in', 'command-line', 'path' and numbers before and after ?
Example :
# 0 "types_and_number_of_bits.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 " /home/incognito/.guix-profile/include/stdc-predef.h" 1 3
# 0 "<command-line>" 2
# 1 "types_and_number_of_bits.c"
# 13 "types_and_number_of_bits.c"
# 1 "/home/incognito/.guix-profile/include/math.h" 1 3
# 27 "/home/incognito/.guix-profile/include/math.h" 3

----------------------------------------------------------

Compilation :

- How to interpret the content of the assembly-level code file .s ?
- Specifically, what is (the code below that comes from a real compiled file) :
.file	"types_and_number_of_bits.c" -> file + path ?
	.text
	.section	.rodata
.LC0: -> variable ?
	.string	"CHAR_BIT"
.LC1:
	.string	"\nThe value of %s is %d.\n"
	.align 8 -> what kind of alignment is this ?

...

.LC44:
	.ascii	"Result of :\n1.0f + \n1" -> why to use ascii ?
	.string	".0f divided by 24 times by the number %f (that is to say, at number that tends to 0+.) \ngives the result %f \nwhile it should give a result very low near 1.0f but greater than it. \nTo demonstrate it, this is the result while dividing it only 4 times : %f. \n"
	.align 8
...

.LC57:
	.string	"\nEnd of script."
	.text
	.globl	main -> main program ?
	.type	main, @function -> '@' ?

...

main:
.LFB6:

...

- And the keywords (sorted by alphabetical order - they do not appear in this order) :
addl	$1, -4(%rbp)
addq	$32, %rsp
addss	%xmm1, %xmm0
call	powf
call	printf
call	putchar
call	puts
.cfi_def_cfa 7, 8
.cfi_def_cfa_offset 16
.cfi_def_cfa_register 6
.cfi_endproc
.cfi_offset 6, -16
.cfi_startproc
cmpl	$24, -4(%rbp)
cvtsi2ssl	-4(%rbp), %xmm0
cvttss2sil	%xmm0, %edx
divss	-40(%rbp), %xmm0
divss	%xmm0, %xmm1
fldt	.LC32(%rip)
fldt	.LC33(%rip)
fstpt	(%rsp)
jle	.L3
jmp	.L2
leaq	-16(%rsp), %rsp
leave
movabsq	$9223372036854775807, %rax
movapd	%xmm0, %xmm1
movaps	%xmm0, %xmm1
movd	%eax, %xmm0
movl	$0, -52(%rbp)
movl	$0, %eax
movl	$2147483647, %ecx
movl	$.LC0, %esi
movl	$.LC11, %esi
movl	-40(%rbp), %eax
movl	%eax, %ecx
movl	%edi, -100(%rbp)
movq	$-1, %rcx
movq	$.LC53, -72(%rbp)
movq	-72(%rbp), %rdx
movq	%rdx, %rcx
movsd	.LC22(%rip), %xmm0
movss	-40(%rbp), %xmm0
movss	.LC42(%rip), %xmm0
movss	%xmm0, -40(%rbp)
movswl	-10(%rbp), %eax
movw	$128, -32(%rbp)
pushq	%rbp
pxor	%xmm0, %xmm0
ret
subq	$112, %rsp

...

.LFE6:
	.size	main, .-main -> size ?
	.section	.rodata
	.align 8
...

.LC43:
	.long	1065353216
	.ident	"GCC: (GNU) 13.2.0" -> ident ?
	.section	.note.GNU-stack,"",@progbits -> section ?

----------------------------------------------------------

Linking :

- Where does the linker get the function definition for all of them during the linking ? On the pre-processing phase, it seems that for some functions, only the declaration is present - example : printf, scanf, powf.
- How could I access those definitions ?
- How to create library files to share with others ?
- What is the difference between static and dynamic libraries ? Static and dynamic linking ?

==========================================================

DEFINITIONS
----------------------------------------------------------

What are (sorted by alphabetical order) :
- 'anode' ?
- 'block device' ?
- 'btrfs' ?
- 'medium' ?
- memory : difference between virtual and real memory ?
- 'NFS' (network file system), 'NFS partition', 'NFS file' and 'NFS server' ? How to use it ? Why does it exists ?
- 'request', 'request code' and 'request descriptor' ?
- 'RF-kill' (or 'rf-kill' or 'rf kill') ?
- 'rfs' ? Is it linked with 'btrfs' ?
- 'rpc' (Remote procedure call names and numbers), 'RPC bad procedure for program', 'RPC program', 'RPC struct' and 'RPC version' ? How to use it ? Why does it exists ?
- 'slot', 'blank slot'(10.2.2 Flags for Globbing -> "blank slots at the beginning of the vector of words."), 'EOF slot', 'EOL slot' and 'time slot' ?
- 'XENIX' (named type file) ?

==========================================================

LIBC SOURCE CODE
----------------------------------------------------------

- Where is defined '__noreturn__' (see '_exit' function within 'unistd.h') ?
- Where is defined the word (or macro or else) 'type' (used in stddef.h in libc) ?
- What is the meaning of those errors (sorted by alphabetical order) ? I could not find enough documentation with 'info libc'.
       - 'EADV'
       - 'EBADE'
       - 'EBADR'
       - 'EBADRPC'
       - 'EBADRQC'
       - 'EBADSLT'
       - 'EBFONT'
       - 'EDOTDOT'
       - 'EHWPOISON'
       - 'EL2HLT'
       - 'EL2NSYNC'
       - 'EL3HLT'
       - 'EL3RST'
       - 'ELIBBAD'
       - 'ELIBSCN'
       - 'EMEDIUMTYPE'
       - 'ENOCSI'
       - 'ENOMEDIUM'
       - 'ENOTNAM'
       - 'EPROCUNAVAIL'
       - 'EPROGMISMATCH'
       - 'EPROGUNAVAIL'
       - 'EREMOTE'
       - 'ERFKILL'
       - 'ERPCMISMATCH'
       - 'ESRMNT'
       - 'EUCLEAN'
       - 'EXFULL'


==========================================================

LIBRARIES
----------------------------------------------------------

- What are '.so' files located under $HOME/.guix-profile/lib (among others - but other location exists) ? Are they compiled libraries ?
- How to use them '.so' files located under $HOME/.guix-profile/lib (among others - but other location exists) ?

==========================================================
